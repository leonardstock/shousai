// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum Role {
  ADMIN
  MEMBER
}

model Subscription {
  id                   String           @id @default(cuid())
  tier                 SubscriptionTier @default(FREE)
  stripeCustomerId     String?          @unique
  stripeSubscriptionId String?          @unique
  userId               String           @unique
  user                 User             @relation(fields: [userId], references: [id])
  startDate            DateTime         @default(now())
  endDate              DateTime?
  status               String           @default("active")

  @@index([userId])
}

model ApiKey {
  id        String    @id @default(cuid())
  key       String    @unique
  name      String
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  lastUsed  DateTime  @default(now())
  enabled   Boolean   @default(true)
  deletedAt DateTime?

  @@index([key])
  @@index([userId])
}

model Organization {
  id                           String   @id @default(cuid())
  name                         String   @unique
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  members                      User[]   @relation("OrganizationMembers")
  spendLimit                   Int?
  spendLimitEmailSent          Boolean?
  dailyApiCallLimitEmailSent   Boolean  @default(false)
  monthlyApiCallLimitEmailSent Boolean  @default(false)
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  firstName      String        @default("")
  lastName       String        @default("")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  organization   Organization? @relation("OrganizationMembers", fields: [organizationId], references: [id])
  usageLogs      UsageLog[]
  apiKey         ApiKey?
  subscription   Subscription?
  role           Role?
}

model UsageLog {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  provider     String
  model        String
  inputTokens  Int
  outputTokens Int
  cost         Float
  success      Boolean
  cached       Boolean

  @@index([userId, createdAt])
  @@index([createdAt])
}
